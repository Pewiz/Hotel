# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ventanaListaClientes.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import csv
import datetime
from PyQt5 import QtCore, QtGui, QtWidgets
from ventanaEditarCliente import ventanaEditarCliente
from ventanaMostrarDatosCliente import ventanaMostrarCliente
from ventanaNuevoClinte import ventanaNuevoCliente
from ventanaListaMascota import ventanaListaMascotas

class ventanaListaReservas(object):
        def __init__(self, cliente_id):
                self.cliente_id = cliente_id
        def setupUi(self, ListaCliente):
                ListaCliente.setObjectName("ListaCliente")
                ListaCliente.resize(802, 602)
                font = QtGui.QFont()
                font.setFamily("Arial")
                ListaCliente.setFont(font)
                icon = QtGui.QIcon()
                icon.addPixmap(QtGui.QPixmap("Recursos/HotelMascota.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                ListaCliente.setWindowIcon(icon)
                self.centralwidget = QtWidgets.QWidget(ListaCliente)
                self.centralwidget.setObjectName("centralwidget")

                #Boton Atras
                self.BtnAtras = QtWidgets.QPushButton(self.centralwidget)
                self.BtnAtras.setGeometry(QtCore.QRect(20, 15, 51, 51))
                self.BtnAtras.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
                self.BtnAtras.setStyleSheet("QPushButton {\n"
"  \n"
"    \n"
"    background-color: rgb(0,0,0,0);\n"
"    border-radius: 20px;\n"
"\n"
"  \n"
"}\n"
"\n"
"\n"
"QPushButton::hover {\n"
"    background: #74b6b6;\n"
"}\n"
"")
                self.BtnAtras.setText("")
                icon1 = QtGui.QIcon()
                icon1.addPixmap(QtGui.QPixmap("Recursos/FotoBtnAtras.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                self.BtnAtras.setIcon(icon1)
                self.BtnAtras.setIconSize(QtCore.QSize(50, 50))
                self.BtnAtras.setObjectName("BtnAtras")

                #Accion boton atras
                self.BtnAtras.clicked.connect(self.cambiar_a_ventana_anterior)

                self.labelTitulo = QtWidgets.QLabel(self.centralwidget)
                self.labelTitulo.setGeometry(QtCore.QRect(-20, 0, 831, 81))
                font = QtGui.QFont()
                font.setFamily("Arial")
                font.setPointSize(27)
                font.setBold(False)
                font.setWeight(50)
                self.labelTitulo.setFont(font)
                self.labelTitulo.setStyleSheet("background-color: rgb(79, 163, 166);")
                self.labelTitulo.setAlignment(QtCore.Qt.AlignCenter)
                self.labelTitulo.setObjectName("labelTitulo")
                self.labelFotoPerrito = QtWidgets.QLabel(self.centralwidget)
                self.labelFotoPerrito.setGeometry(QtCore.QRect(520, 170, 281, 271))
                self.labelFotoPerrito.setText("")
                self.labelFotoPerrito.setPixmap(QtGui.QPixmap("Recursos/FotoPerrito.png"))
                self.labelFotoPerrito.setScaledContents(True)
                self.labelFotoPerrito.setObjectName("labelFotoPerrito")

                #Boton hacer checkout
                self.btnHacerCheckOut = QtWidgets.QPushButton(self.centralwidget)
                self.btnHacerCheckOut.setGeometry(QtCore.QRect(32, 460, 141, 31))
                self.btnHacerCheckOut.setEnabled(False)
                font = QtGui.QFont()
                font.setFamily("Arial")
                font.setPointSize(11)
                font.setBold(True)
                font.setWeight(75)
                self.btnHacerCheckOut.setFont(font)
                self.btnHacerCheckOut.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
                self.btnHacerCheckOut.setStyleSheet("background-color: rgb(0, 177, 15);\n" "border-radius:15px;")
                self.btnHacerCheckOut.setObjectName("btnHacerCheckOut")

                #Accion Boton hacer checkout
                self.btnHacerCheckOut.clicked.connect(self.checkOut)

                #Boton Editar
                self.btnModificar = QtWidgets.QPushButton(self.centralwidget)
                self.btnModificar.setGeometry(QtCore.QRect(196, 460, 151, 31))
                self.btnModificar.setEnabled(False)
                font = QtGui.QFont()
                font.setFamily("Arial")
                font.setPointSize(11)
                font.setBold(True)
                font.setWeight(75)
                self.btnModificar.setFont(font)
                self.btnModificar.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
                self.btnModificar.setStyleSheet("background-color: rgb(251, 255, 0);\n" "border-radius:15px;")
                self.btnModificar.setObjectName("btnModificar")

                self.btnModificar.clicked.connect(lambda: self.cambiarVentana(ventanaEditarCliente, self.obtenerClienteSeleccionado()))

                #Boton cancelar
                self.btnCancelar = QtWidgets.QPushButton(self.centralwidget)
                self.btnCancelar.setGeometry(QtCore.QRect(368, 460, 141, 31))
                self.btnCancelar.setEnabled(False)
                font = QtGui.QFont()
                font.setFamily("Arial")
                font.setPointSize(11)
                font.setBold(True)
                font.setWeight(75)
                self.btnCancelar.setFont(font)
                self.btnCancelar.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
                self.btnCancelar.setStyleSheet("background-color: rgb(255, 0, 0);\n" "border-radius:15px;")
                self.btnCancelar.setObjectName("btnCancelar")

                #Accion boton cancelar
                self.btnCancelar.clicked.connect(lambda: self.eliminarCliente(self.obtenerClienteSeleccionado()))

                #Tabla Clientes
                self.tablaListaReservas = QtWidgets.QTableWidget(self.centralwidget)
                self.tablaListaReservas.setGeometry(QtCore.QRect(30, 160, 481, 291))
                self.tablaListaReservas.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
                self.tablaListaReservas.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
                self.tablaListaReservas.setObjectName("tablaListaReservas")
                self.tablaListaReservas.setColumnCount(3)
                item = QtWidgets.QTableWidgetItem()
                item.setTextAlignment(QtCore.Qt.AlignCenter)
                self.tablaListaReservas.setHorizontalHeaderItem(0, item)
                item = QtWidgets.QTableWidgetItem()
                item.setTextAlignment(QtCore.Qt.AlignCenter)
                self.tablaListaReservas.setHorizontalHeaderItem(1, item)
                item = QtWidgets.QTableWidgetItem()
                item.setTextAlignment(QtCore.Qt.AlignCenter)
                self.tablaListaReservas.setHorizontalHeaderItem(2, item)
                self.tablaListaReservas.horizontalHeader().setCascadingSectionResizes(True)
                self.tablaListaReservas.horizontalHeader().setDefaultSectionSize(115)
                self.tablaListaReservas.horizontalHeader().setHighlightSections(True)
                self.tablaListaReservas.horizontalHeader().setMinimumSectionSize(39)
                self.tablaListaReservas.horizontalHeader().setSortIndicatorShown(False)
                self.tablaListaReservas.horizontalHeader().setStretchLastSection(True)
                self.tablaListaReservas.verticalHeader().setCascadingSectionResizes(True)
                self.tablaListaReservas.verticalHeader().setHighlightSections(True)
                self.tablaListaReservas.verticalHeader().setSortIndicatorShown(False)
                self.tablaListaReservas.verticalHeader().setStretchLastSection(False)
                self.tablaListaReservas.verticalHeader().setVisible(False)

                #Reservas de
                self.labelReservasDe = QtWidgets.QLabel(self.centralwidget)
                self.labelReservasDe.setGeometry(QtCore.QRect(29, 114, 481, 31))
                font = QtGui.QFont()
                font.setFamily("Arial")
                font.setPointSize(11)
                self.labelReservasDe.setFont(font)
                self.labelReservasDe.setStyleSheet("background-color: rgb(79, 163, 166);\n" "border-radius: 12px;")
                self.labelReservasDe.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
                self.labelReservasDe.setIndent(162)
                self.labelReservasDe.setObjectName("labelReservasDe")
                
                self.labelNombreDelPropietario = QtWidgets.QLabel(self.centralwidget)
                self.labelNombreDelPropietario.setGeometry(QtCore.QRect(281, 119, 121, 21))
                font = QtGui.QFont()
                font.setFamily("Arial")
                font.setPointSize(11)
                self.labelNombreDelPropietario.setFont(font)
                self.labelNombreDelPropietario.setObjectName("labelNombreDelPropietario")
                
                self.labelTitulo.raise_()
                self.labelFotoPerrito.raise_()
                self.btnHacerCheckOut.raise_()
                self.btnModificar.raise_()
                self.btnCancelar.raise_()
                self.tablaListaReservas.raise_()
                self.labelReservasDe.raise_()
                self.BtnAtras.raise_()
                self.labelNombreDelPropietario.raise_()
                ListaCliente.setCentralWidget(self.centralwidget)

                self.retranslateUi(ListaCliente)
                QtCore.QMetaObject.connectSlotsByName(ListaCliente)
                
                self.calcularDias()

                # Cargar Usuarios del CSV
                self.cargarUsuariosCSV()

                self.tablaListaReservas.itemSelectionChanged.connect(self.actualizarBotones)


       
        def retranslateUi(self, ListaCliente):
                _translate = QtCore.QCoreApplication.translate
                ListaCliente.setWindowTitle(_translate("ListaCliente", "Hotel"))
                self.labelTitulo.setText(_translate("ListaCliente", "Lista Reservas "))
                self.btnHacerCheckOut.setText(_translate("ListaCliente", "Hacer Checkout"))
                self.btnModificar.setText(_translate("ListaCliente", "Modificar Reserva"))
                self.btnCancelar.setText(_translate("ListaCliente", "Cancelar Reserva"))
                item = self.tablaListaReservas.horizontalHeaderItem(0)
                item.setText(_translate("ListaCliente", "Rut"))
                item = self.tablaListaReservas.horizontalHeaderItem(1)
                item.setText(_translate("ListaCliente", "Nombre"))
                item = self.tablaListaReservas.horizontalHeaderItem(2)
                item.setText(_translate("ListaCliente", "Apellido"))
                self.labelReservasDe.setText(_translate("ListaCliente", "Reservas de "))
                
                nombre_cliente = self.obtenerNombreCliente(self.cliente_id)
                if nombre_cliente is not None:
                        self.labelNombreDelPropietario.setText(nombre_cliente)
                else:
                        self.labelNombreDelPropietario.setText("Cliente ")
                        
        def obtenerNombreCliente(self, cliente_id):
                with open('ArchivosCSV/Cliente.csv', newline='') as csvfile:
                        reader = csv.reader(csvfile, delimiter=',', quotechar='"')
                        datos_clientes = reader
                        for cliente in datos_clientes:
                                if cliente[0] == cliente_id:
                                        return cliente[1]  # Suponiendo que el nombre del cliente está en la columna 1 del CSV
                        return None  # Si no se encuentra el cliente con el cliente_id especificado
        
        def calcularDias(self):
                datos = self.leerDatosDesdeCSV()
                reservas = self.filtrarReservas(datos, self.cliente_id)
                for dato in reservas:
                        fechaRes = datetime.datetime.strptime(dato[4], "%d/%m/%Y").date()
                        self.fechaHoy = datetime.datetime.now().date()
                        horaHoy = datetime.datetime.now().time()
                        if horaHoy < datetime.time(13, 0):
                                unDia = datetime.timedelta(days=1)
                                self.fechaHoy = self.fechaHoy - unDia
                        if dato[5] != "None":
                                fechaFin = datetime.datetime.strptime(dato[5], "%d/%m/%Y").date()
                                dif = fechaFin - fechaRes
                                diferencia = dif.days
                        elif self.fechaHoy > fechaRes:
                                dif = self.fechaHoy - fechaRes
                                diferencia = dif.days
                        else:
                                diferencia = 0
                        #Calcular dias para csv de reservas 
                        with open('ArchivosCSV/Habitaciones.csv', "r", encoding="latin1") as w:
                                lector = csv.reader(w, delimiter=",")
                                lista_delistas = []
                                for lista in lector:
                                        if lista == dato:
                                                try:
                                                        lista[6] = diferencia
                                                except IndexError:
                                                        return False
                                        lista_delistas.append(lista)
                        with open('ArchivosCSV/Habitaciones.csv', "w", newline="") as w:
                                escritor = csv.writer(w, delimiter=",")
                                for lista in lista_delistas:
                                        escritor.writerow(lista)
                        #Calcular dias para csv de lectura                
                        with open('ArchivosCSV/ReservaLectura.csv', "r", encoding="latin1") as w:
                                lector = csv.reader(w, delimiter=",")
                                listadelistas = []
                                for lista in lector:
                                        if lista[0] == dato[0] and lista[1] == dato[1] and lista[4] == dato[4] and lista[5] == dato[5]:
                                                try:
                                                        lista[6] = diferencia
                                                except IndexError:
                                                        return False
                                        listadelistas.append(lista)
                        with open('ArchivosCSV/ReservaLectura.csv', "w", newline="") as w:
                                escritor = csv.writer(w, delimiter=",")
                                for lista in listadelistas:
                                        escritor.writerow(lista)
                        

        def checkOut(self):
                msg1 = QtWidgets.QMessageBox()
                msg1.setWindowTitle("Confirmación.")
                msg1.setText("¿Desea realizar el checkOut de esta reserva?\nEsta acción no se puede revertir...")
                msg1.setStandardButtons(QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No)
                
                decision = msg1.exec_()
                if decision == QtWidgets.QMessageBox.Yes:
                        # Obtener el índice de la fila seleccionada
                        fechaCheckOut = str(self.fechaHoy.strftime("%d/%m/%Y"))
                        fila_seleccionada = self.tablaListaReservas.currentRow()
                        datos = self.leerDatosDesdeCSV()
                        reservas = self.filtrarReservas(datos, self.cliente_id)
                        with open('ArchivosCSV/Habitaciones.csv', "r", encoding="latin1") as w:
                                lector = csv.reader(w, delimiter=",")
                                lista_delistas = []
                                for lista in lector:
                                        for i, lis in enumerate(reservas):
                                                if lista == lis and i == fila_seleccionada:
                                                        lista[5] = fechaCheckOut
                                        lista_delistas.append(lista)

                        with open('ArchivosCSV/Habitaciones.csv', "w", newline="") as w:
                                escritor = csv.writer(w, delimiter=",")
                                for lista in lista_delistas:
                                        escritor.writerow(lista)
                                
                        with open('ArchivosCSV/ReservaLectura.csv', "r", encoding="latin1") as w:
                                lector = csv.reader(w, delimiter=",")
                                listadelistas = []
                                for lista in lector:
                                        for lis in reservas:
                                                if lista[0] == lis[0] and lista[1] == lis[1] and lista[4] == lis[4] and lista[5] == lis[5]:
                                                        lista[5] = fechaCheckOut
                                        listadelistas.append(lista)

                        with open('ArchivosCSV/ReservaLectura.csv', "w", newline="") as w:
                                escritor = csv.writer(w, delimiter=",")
                                for lista in listadelistas:
                                        escritor.writerow(lista)
                        self.cargarUsuariosCSV()
                        msg = QtWidgets.QMessageBox()
                        msg.setWindowTitle("Checkout realizado con exito.")
                        msg.setText("Hola, revise sus boletas para revisar el precio.\nSus.")
                        msg.exec_()
                else:
                        msg1.close()
                        
                
                

        def cambiarVentana(self, clase, cliente_id):
                self.uiVentanaActual = QtWidgets.QApplication.activeWindow()
                self.uiVentanaActual.close()
                self.nuevaVentana = QtWidgets.QMainWindow()
                self.ui = clase(cliente_id, self.habitacion)  # Pasa el idCliente y el habitacion como parámetros
                self.ui.setupUi(self.nuevaVentana)
                self.nuevaVentana.show()

        def cambiar_a_ventana_anterior(self):
                self.ventanaActual = QtWidgets.QApplication.activeWindow()
                self.ventanaActual.close()
                from ventanaListaClientes import ventanaListaCliente  # Importación local para evitar el ciclo de importación
                self.ventanaAnterior = QtWidgets.QMainWindow(self.ventanaActual.parent())
                self.uiVentanaAnterior = ventanaListaCliente(None, None, 0)
                self.uiVentanaAnterior.setupUi(self.ventanaAnterior)
                self.ventanaAnterior.show()

        def cambiarVentanaNuevoCliente(self):
                self.uiVentanaActual = QtWidgets.QApplication.activeWindow()
                self.uiVentanaActual.close()
                self.nuevaVentana = QtWidgets.QMainWindow()
                self.ui = ventanaNuevoCliente(self.cliente_id,self.habitacion) 
                self.ui.setupUi(self.nuevaVentana)
                self.nuevaVentana.show() 
        # Abre el archivo CSV y devuelve los datos como una lista de filas
        def leerDatosDesdeCSV(self):
                with open('ArchivosCSV/Habitaciones.csv', newline='') as csvfile:
                        reader = csv.reader(csvfile, delimiter=',', quotechar='"')
                        return list(reader)


        # Inserta los datos en el widget de la tabla
        def insertarDatosEnTabla(self, datos):
                for fila in datos:
                        posicionFila = self.tablaListaReservas.rowCount()
                        self.tablaListaReservas.insertRow(posicionFila)

                        for columna, value in enumerate(fila):
                                item = QtWidgets.QTableWidgetItem(value)
                                item.setTextAlignment(QtCore.Qt.AlignCenter)
                                self.tablaListaReservas.setItem(posicionFila, columna, item)


        def filtrarReservas(self, reservas, cliente_id):
                return [reserva for reserva in reservas if reserva[0] == cliente_id]
        
        
        # Carga los datos del archivo CSV en el tableWidget
        def cargarUsuariosCSV(self):
                datos = self.leerDatosDesdeCSV()

                if datos:
                        reservas = self.filtrarReservas(datos, self.cliente_id)
                        encabezados = ["Id Habitacion", "Cantidad de Mascota", "Especie", "Fecha Inicio", "Estado", "Dias"]

                        self.tablaListaReservas.clearContents()
                        self.tablaListaReservas.setRowCount(0)
                        self.tablaListaReservas.setColumnCount(len(encabezados))
                        self.tablaListaReservas.setHorizontalHeaderLabels(encabezados)
                        
                        self.tablaListaReservas.setRowCount(len(reservas))

                        for i, dato in enumerate(reservas):
                            idH = QtWidgets.QTableWidgetItem(dato[1])
                            self.tablaListaReservas.setItem(i, 0, idH)
                            
                            nombre = QtWidgets.QTableWidgetItem(dato[2])
                            self.tablaListaReservas.setItem(i, 1, nombre)
                            
                            especie = QtWidgets.QTableWidgetItem(dato[3])
                            self.tablaListaReservas.setItem(i, 2, especie)
                            
                            fecha = QtWidgets.QTableWidgetItem(dato[4])
                            self.tablaListaReservas.setItem(i, 3, fecha)
                            
                            fechaRes = datetime.datetime.strptime(dato[4], "%d/%m/%Y").date()
                            self.fechaHoy = datetime.datetime.now().date()
                            if self.fechaHoy < fechaRes:
                                estado = "Reservado"
                            elif self.fechaHoy == fechaRes:
                                estado = "En Check-in"
                            elif self.fechaHoy > fechaRes and dato[5] == "None":
                                estado = "En Habitación"
                            else:
                                estado = "Finalizado" 
                            estad = QtWidgets.QTableWidgetItem(estado)
                            self.tablaListaReservas.setItem(i, 4, estad)
                            
                            dias = QtWidgets.QTableWidgetItem(str(dato[6]))
                            self.tablaListaReservas.setItem(i, 5, dias)
                            

        def actualizarBotones(self):
                filasSeleccionada = self.tablaListaReservas.selectedIndexes()
                fila_seleccionada = self.tablaListaReservas.currentRow()
                estado = self.tablaListaReservas.item(fila_seleccionada, 4).text()
                if filasSeleccionada and estado == "En Check-in":
                        self.btnHacerCheckOut.setEnabled(False)
                        self.btnModificar.setEnabled(True)
                        self.btnCancelar.setEnabled(True)
                elif filasSeleccionada and estado == "En Habitación":
                        self.btnHacerCheckOut.setEnabled(True)
                        self.btnModificar.setEnabled(False)
                        self.btnCancelar.setEnabled(False)
                else:
                        # No se seleccionó ninguna fila
                        self.btnHacerCheckOut.setEnabled(False)
                        self.btnModificar.setEnabled(False)
                        self.btnCancelar.setEnabled(False)

        def eliminarCliente(self, usuario_id):
                # Obtener el índice de la fila seleccionada
                fila_seleccionada = self.tablaListaReservas.currentRow()

                # Eliminar la fila de la tabla
                self.tablaListaReservas.removeRow(fila_seleccionada)

                # Eliminar el usuario del archivo CSV
                datos = self.leerDatosDesdeCSV()
                if datos:
                        usuarios_actualizados = [fila for fila in datos if fila[0] != usuario_id]
                with open('ArchivosCSV/Cliente.csv', 'w', newline='') as csvfile:
                        writer = csv.writer(csvfile, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
                        writer.writerows(usuarios_actualizados)

                # Actualizar los botones
                self.actualizarBotones()
        
        

