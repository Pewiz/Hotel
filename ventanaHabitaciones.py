# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ventanaHabitaciones.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import csv
import datetime
from PyQt5 import QtCore, QtGui, QtWidgets
from ventanaListaClientes import ventanaListaCliente

class ventanaHabitaciones(object):
        def setupUi(self, Habitaciones):
                self.idHabitacionSeleccionada = None
                Habitaciones.setObjectName("Habitaciones")
                Habitaciones.setEnabled(True)
                Habitaciones.resize(802, 602)
                icon = QtGui.QIcon()
                icon.addPixmap(QtGui.QPixmap("Recursos/HotelMascota.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                Habitaciones.setWindowIcon(icon)
                Habitaciones.setDockOptions(QtWidgets.QMainWindow.AllowTabbedDocks|QtWidgets.QMainWindow.AnimatedDocks)
                self.centralwidget = QtWidgets.QWidget(Habitaciones)
                self.centralwidget.setObjectName("centralwidget")
                self.labelTitulo = QtWidgets.QLabel(self.centralwidget)
                self.labelTitulo.setGeometry(QtCore.QRect(-20, 0, 831, 81))
                font = QtGui.QFont()
                font.setFamily("Arial")
                font.setPointSize(27)
                font.setBold(False)
                font.setWeight(50)
                self.labelTitulo.setFont(font)
                self.labelTitulo.setStyleSheet("background-color: rgb(79, 163, 166);")
                self.labelTitulo.setAlignment(QtCore.Qt.AlignCenter)
                self.labelTitulo.setObjectName("labelTitulo")

                #Boton atras
                self.BtnAtras = QtWidgets.QPushButton(self.centralwidget)
                self.BtnAtras.setGeometry(QtCore.QRect(20, 15, 51, 51))
                self.BtnAtras.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
                self.BtnAtras.setStyleSheet("QPushButton {\n"
"  \n"
"    \n"
"    background-color: rgb(0,0,0,0);\n"
"    border-radius: 20px;\n"
"\n"
"  \n"
"}\n"
"\n"
"\n"
"QPushButton::hover {\n"
"    background: #74b6b6;\n"
"}")
                self.BtnAtras.setText("")
                icon1 = QtGui.QIcon()
                icon1.addPixmap(QtGui.QPixmap("Recursos/FotoBtnAtras.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                self.BtnAtras.setIcon(icon1)
                self.BtnAtras.setIconSize(QtCore.QSize(50, 50))
                self.BtnAtras.setObjectName("BtnAtras")

                #Accion boton atras
                self.BtnAtras.clicked.connect(self.cambiar_a_ventana_anterior)

                #Tabla de las habitaciones 
                self.tablaHabitaciones = QtWidgets.QTableWidget(self.centralwidget)
                self.tablaHabitaciones.setGeometry(QtCore.QRect(251, 110, 551, 421))
                self.tablaHabitaciones.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
                self.tablaHabitaciones.setObjectName("tablaHabitaciones")
                self.tablaHabitaciones.setColumnCount(5)
                self.tablaHabitaciones.setRowCount(0)
                item = QtWidgets.QTableWidgetItem()
                item.setTextAlignment(QtCore.Qt.AlignCenter)
                font = QtGui.QFont()
                font.setFamily("Arial")
                item.setFont(font)
                self.tablaHabitaciones.setHorizontalHeaderItem(0, item)
                item = QtWidgets.QTableWidgetItem()
                item.setTextAlignment(QtCore.Qt.AlignCenter)
                font = QtGui.QFont()
                font.setFamily("Arial")
                item.setFont(font)
                self.tablaHabitaciones.setHorizontalHeaderItem(1, item)
                item = QtWidgets.QTableWidgetItem()
                item.setTextAlignment(QtCore.Qt.AlignCenter)
                font = QtGui.QFont()
                font.setFamily("Arial")
                item.setFont(font)
                self.tablaHabitaciones.setHorizontalHeaderItem(2, item)
                item = QtWidgets.QTableWidgetItem()
                item.setTextAlignment(QtCore.Qt.AlignCenter)
                font = QtGui.QFont()
                font.setFamily("Arial")
                item.setFont(font)
                self.tablaHabitaciones.setHorizontalHeaderItem(3, item)
                item = QtWidgets.QTableWidgetItem()
                item.setTextAlignment(QtCore.Qt.AlignCenter)
                font = QtGui.QFont()
                font.setFamily("Arial")
                item.setFont(font)
                self.tablaHabitaciones.setHorizontalHeaderItem(4, item)
                self.tablaHabitaciones.horizontalHeader().setCascadingSectionResizes(True)
                self.tablaHabitaciones.horizontalHeader().setDefaultSectionSize(106)
                self.tablaHabitaciones.horizontalHeader().setHighlightSections(True)
                self.tablaHabitaciones.horizontalHeader().setMinimumSectionSize(106)
                self.tablaHabitaciones.horizontalHeader().setSortIndicatorShown(False)
                self.tablaHabitaciones.horizontalHeader().setStretchLastSection(True)
                self.tablaHabitaciones.verticalHeader().setVisible(True)
                self.tablaHabitaciones.verticalHeader().setCascadingSectionResizes(True)
                self.tablaHabitaciones.verticalHeader().setSortIndicatorShown(False)
                self.tablaHabitaciones.verticalHeader().setStretchLastSection(False)

####################################--------FILTROS--------##################################################

                #Fecha de estadia
                self.labelFechaEstadia = QtWidgets.QLabel(self.centralwidget)
                self.labelFechaEstadia.setGeometry(QtCore.QRect(4, 100, 201, 31))
                self.labelFechaEstadia.setBaseSize(QtCore.QSize(0, 0))
                font = QtGui.QFont()
                font.setFamily("Arial")
                font.setPointSize(11)
                self.labelFechaEstadia.setFont(font)
                self.labelFechaEstadia.setStyleSheet("background-color: rgb(79, 163, 166);\n" "")
                self.labelFechaEstadia.setAlignment(QtCore.Qt.AlignCenter)
                self.labelFechaEstadia.setObjectName("labelFechaEstadia")

                #Fecha desde
                self.dateEditDesde = QtWidgets.QDateEdit(self.centralwidget)
                self.dateEditDesde.setGeometry(QtCore.QRect(65, 140, 110, 22))
                self.dateEditDesde.setObjectName("dateEditDesde")

                #Tamaño de la mascota
                self.labelSizeMascota = QtWidgets.QLabel(self.centralwidget)
                self.labelSizeMascota.setGeometry(QtCore.QRect(4, 180, 201, 31))
                self.labelSizeMascota.setBaseSize(QtCore.QSize(0, 0))
                font = QtGui.QFont()
                font.setFamily("Arial")
                font.setPointSize(11)
                self.labelSizeMascota.setFont(font)
                self.labelSizeMascota.setStyleSheet("background-color: rgb(79, 163, 166);\n" "")
                self.labelSizeMascota.setAlignment(QtCore.Qt.AlignCenter)
                self.labelSizeMascota.setIndent(-1)
                self.labelSizeMascota.setObjectName("labelSizeMascota")

                #ComboBox Tamaño Mascota
                self.comboBoxSizeMascota = QtWidgets.QComboBox(self.centralwidget)
                self.comboBoxSizeMascota.setGeometry(QtCore.QRect(21, 220, 111, 22))
                font = QtGui.QFont()
                font.setFamily("Arial")
                self.comboBoxSizeMascota.setFont(font)
                self.comboBoxSizeMascota.setObjectName("comboBoxSizeMascota")
                self.comboBoxSizeMascota.addItem("")
                self.comboBoxSizeMascota.addItem("")
                self.comboBoxSizeMascota.addItem("")
                self.comboBoxSizeMascota.addItem("")
                self.comboBoxSizeMascota.addItem("")
                self.comboBoxSizeMascota.addItem("")

                

                #Mascota peligrosa
                self.labelMascotaPeligrosa = QtWidgets.QLabel(self.centralwidget)
                self.labelMascotaPeligrosa.setGeometry(QtCore.QRect(3, 270, 201, 31))
                self.labelMascotaPeligrosa.setBaseSize(QtCore.QSize(0, 0))
                font = QtGui.QFont()
                font.setFamily("Arial")
                font.setPointSize(11)
                self.labelMascotaPeligrosa.setFont(font)
                self.labelMascotaPeligrosa.setStyleSheet("background-color: rgb(79, 163, 166);\n" "")
                self.labelMascotaPeligrosa.setAlignment(QtCore.Qt.AlignCenter)
                self.labelMascotaPeligrosa.setObjectName("labelMascotaPeligrosa")

                #ComboBox Mascota Peligrosa
                self.comboBoxMascotaPeligrosa = QtWidgets.QComboBox(self.centralwidget)
                self.comboBoxMascotaPeligrosa.setGeometry(QtCore.QRect(21, 310, 111, 22))
                font = QtGui.QFont()
                font.setFamily("Arial")
                self.comboBoxMascotaPeligrosa.setFont(font)
                self.comboBoxMascotaPeligrosa.setObjectName("comboBoxMascotaPeligrosa")
                self.comboBoxMascotaPeligrosa.addItem("")
                self.comboBoxMascotaPeligrosa.addItem("")
                self.comboBoxMascotaPeligrosa.addItem("")

                #Tipo de Mascota
                self.labelTipoMascota = QtWidgets.QLabel(self.centralwidget)
                self.labelTipoMascota.setGeometry(QtCore.QRect(3, 360, 201, 31))
                self.labelTipoMascota.setBaseSize(QtCore.QSize(0, 0))
                font = QtGui.QFont()
                font.setFamily("Arial")
                font.setPointSize(11)
                self.labelTipoMascota.setFont(font)
                self.labelTipoMascota.setStyleSheet("background-color: rgb(79, 163, 166);\n" "")
                self.labelTipoMascota.setAlignment(QtCore.Qt.AlignCenter)
                self.labelTipoMascota.setObjectName("labelTipoMascota")
                
                #ComboBox Tipo de Mascota
                self.comboBoxTipoMascota = QtWidgets.QComboBox(self.centralwidget)
                self.comboBoxTipoMascota.setGeometry(QtCore.QRect(21, 400, 111, 22))
                font = QtGui.QFont()
                font.setFamily("Arial")
                self.comboBoxTipoMascota.setFont(font)
                self.comboBoxTipoMascota.setObjectName("comboBoxTipoMascota")
                self.comboBoxTipoMascota.addItem("")
                self.comboBoxTipoMascota.addItem("")
                self.comboBoxTipoMascota.addItem("")
                self.comboBoxTipoMascota.addItem("")
                self.comboBoxTipoMascota.addItem("")

                #Label Cantidad de Mascotas
                self.labelCantidadMascota = QtWidgets.QLabel(self.centralwidget)
                self.labelCantidadMascota.setGeometry(QtCore.QRect(0, 450, 201, 31))
                self.labelCantidadMascota.setBaseSize(QtCore.QSize(0, 0))
                font = QtGui.QFont()
                font.setFamily("Arial")
                font.setPointSize(11)
                self.labelCantidadMascota.setFont(font)
                self.labelCantidadMascota.setStyleSheet("background-color: rgb(79, 163, 166);\n")
                self.labelCantidadMascota.setAlignment(QtCore.Qt.AlignCenter)
                self.labelCantidadMascota.setObjectName("labelCantidadMascota")
                
                #SpinBox Cantidad de Macotas
                self.spinBoxCantidad = QtWidgets.QSpinBox(self.centralwidget)
                self.spinBoxCantidad.setGeometry(QtCore.QRect(30, 490, 42, 22))
                self.spinBoxCantidad.setMinimum(1)
                self.spinBoxCantidad.setMaximum(20)
                self.spinBoxCantidad.setObjectName("spinBoxCantidad")
####################################--------FIN DE LOS FILTROS--------##################################################                

                #Boton Aplicar Filtros
                self.BtnAplicarFiltros = QtWidgets.QPushButton(self.centralwidget)
                self.BtnAplicarFiltros.setGeometry(QtCore.QRect(2, 549, 241, 31))
                self.BtnAplicarFiltros.setEnabled(False)
                font = QtGui.QFont()
                font.setFamily("Arial")
                font.setPointSize(11)
                font.setBold(True)
                font.setWeight(75)
                self.BtnAplicarFiltros.setFont(font)
                self.BtnAplicarFiltros.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
                self.BtnAplicarFiltros.setStyleSheet("QPushButton{\n"
"    border-radius: 13px;\n"
"    background-color: #4fa3a6;\n"
"}\n"
"QPushButton::hover {\n"
"    background: rgb(181, 181, 181) ;\n"
"}")
                self.BtnAplicarFiltros.setObjectName("BtnAplicarFiltros")

                #Accion Boton Aplicar Filtros
                self.BtnAplicarFiltros.clicked.connect(self.aplicarFiltro)

                #Boton Aceptar
                self.BtnAceptar = QtWidgets.QPushButton(self.centralwidget)
                self.BtnAceptar.setGeometry(QtCore.QRect(640, 547, 151, 41))
                font = QtGui.QFont()
                font.setFamily("Arial")
                font.setPointSize(11)
                font.setBold(True)
                font.setWeight(75)
                self.BtnAceptar.setFont(font)
                self.BtnAceptar.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
                self.BtnAceptar.setStyleSheet("QPushButton{\n"
"    border-radius: 13px;\n"
"    background-color: #4fa3a6;\n"
"}\n"
"QPushButton::hover {\n"
"    background: rgb(181, 181, 181) ;\n"
"}")
                self.BtnAceptar.setObjectName("BtnAceptar")
                self.BtnAceptar.setEnabled(False)

                #Accion boton aceptar
                self.BtnAceptar.clicked.connect(lambda: self.cambiarVentanaListaCliente(self.obtenerHabitacionSeleccionada()))

                Habitaciones.setCentralWidget(self.centralwidget)
                self.retranslateUi(Habitaciones)
                QtCore.QMetaObject.connectSlotsByName(Habitaciones)

                self.cargarHabitacionesCSV()

                self.dateEditDesde.dateChanged.connect(self.verificarCamposFiltros)
                self.comboBoxSizeMascota.currentTextChanged.connect(self.verificarCamposFiltros)
                self.comboBoxMascotaPeligrosa.currentTextChanged.connect(self.verificarCamposFiltros)
                self.comboBoxTipoMascota.currentTextChanged.connect(self.verificarCamposFiltros)
                self.tablaHabitaciones.itemSelectionChanged.connect(self.verificarSeleccion)

        def retranslateUi(self, Habitaciones):
                _translate = QtCore.QCoreApplication.translate
                Habitaciones.setWindowTitle(_translate("Habitaciones", "Hotel"))
                self.labelTitulo.setText(_translate("Habitaciones", "Habitaciones"))
                item = self.tablaHabitaciones.horizontalHeaderItem(0)
                item.setText(_translate("Habitaciones", "Id"))
                item = self.tablaHabitaciones.horizontalHeaderItem(1)
                item.setText(_translate("Habitaciones", "Capacidad"))
                item = self.tablaHabitaciones.horizontalHeaderItem(2)
                item.setText(_translate("Habitaciones", "Separada"))
                item = self.tablaHabitaciones.horizontalHeaderItem(3)
                item.setText(_translate("Habitaciones", "Tipo de Mascota"))
                item = self.tablaHabitaciones.horizontalHeaderItem(4)
                item.setText(_translate("Habitaciones", "Precio Base"))
                self.labelFechaEstadia.setText(_translate("Habitaciones", "Fecha de estadia"))
                self.labelSizeMascota.setText(_translate("Habitaciones", "Tamaño de la mascota"))
                self.comboBoxSizeMascota.setItemText(0, _translate("Habitaciones", "Elegir"))
                self.comboBoxSizeMascota.setItemText(1, _translate("Habitaciones", "Muy pequeño"))
                self.comboBoxSizeMascota.setItemText(2, _translate("Habitaciones", "Pequeño"))
                self.comboBoxSizeMascota.setItemText(3, _translate("Habitaciones", "Mediano"))
                self.comboBoxSizeMascota.setItemText(4, _translate("Habitaciones", "Grande"))
                self.comboBoxSizeMascota.setItemText(5, _translate("Habitaciones", "Muy Grande"))
                self.labelMascotaPeligrosa.setText(_translate("Habitaciones", "Mascota peligrosa"))
                self.BtnAceptar.setText(_translate("Habitaciones", "Aceptar"))
                self.BtnAplicarFiltros.setText(_translate("Habitaciones", "Aplicar Filtros"))
                self.comboBoxMascotaPeligrosa.setItemText(0, _translate("Habitaciones", "Elegir"))
                self.comboBoxMascotaPeligrosa.setItemText(1, _translate("Habitaciones", "Si"))
                self.comboBoxMascotaPeligrosa.setItemText(2, _translate("Habitaciones", "No"))
                self.labelTipoMascota.setText(_translate("Habitaciones", "Tipo de mascota"))
                self.comboBoxTipoMascota.setItemText(0, _translate("Habitaciones", "Elegir"))
                self.comboBoxTipoMascota.setItemText(1, _translate("Habitaciones", "Perro"))
                self.comboBoxTipoMascota.setItemText(2, _translate("Habitaciones", "Gato"))
                self.comboBoxTipoMascota.setItemText(3, _translate("Habitaciones", "Roedor"))
                self.comboBoxTipoMascota.setItemText(4, _translate("Habitaciones", "Otro"))
                self.labelCantidadMascota.setText(_translate("Habitaciones", "Cantidad de mascotas"))



                


        def cambiarVentana(self, clase, id_Habitacion):
                self.uiVentanaActual = QtWidgets.QApplication.activeWindow()
                self.uiVentanaActual.close()
                self.nuevaVentana = QtWidgets.QMainWindow()
                self.ui = clase(id_Habitacion)
                self.ui.setupUi(self.nuevaVentana)
                self.nuevaVentana.show()

        def cambiarVentanaListaCliente(self, idHabitacion):
                flag = True
                with open('ArchivosCSV/Habitaciones.csv', 'r') as file:
                        reader = csv.reader(file)
                        next(reader)  # Skip header row
                        for lista in reader:
                                if idHabitacion[0] == lista[1]:
                                        habitacion = lista
                fecha = datetime.datetime.strptime(habitacion[4], "%d/%m/%Y").date()
                fechaHoy = datetime.datetime.now().date()
                diferencia = fecha - fechaHoy
                if diferencia <= datetime.timedelta(days=2):
                        msg1 = QtWidgets.QMessageBox()
                        msg1.setWindowTitle("Confirmación.")
                        msg1.setText("La habitación esta a punto de ser reservada, en caso de elegir esta habitación, se hará checkout automatico el dia " + habitacion[4] + ".\n¿Desea realizar reserva a esta habitación?")
                        msg1.setStandardButtons(QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No)
                        decision = msg1.exec_()
                        if decision == QtWidgets.QMessageBox.No:    
                                flag = False
                        else:
                                flag = True
                        msg1.close()
                if flag == True:
                        self.uiVentanaActual = QtWidgets.QApplication.activeWindow()
                        self.uiVentanaActual.close()
                        self.nuevaVentana = QtWidgets.QMainWindow()
                        self.ui = ventanaListaCliente(None, idHabitacion, 1)  # Pasar cliente_id y idHabitacion como parámetros
                        self.ui.setupUi(self.nuevaVentana)
                        self.nuevaVentana.show()

        def cambiar_a_ventana_anterior(self):
                self.ventanaActual = QtWidgets.QApplication.activeWindow()
                self.ventanaActual.close()
                from ventanaAdministracion import ventanaAdministracion  # Importación local para evitar el ciclo de importación
                self.ventanaAnterior = QtWidgets.QMainWindow(self.ventanaActual.parent())
                self.uiVentanaAnterior = ventanaAdministracion()
                self.uiVentanaAnterior.setupUi(self.ventanaAnterior)
                self.ventanaAnterior.show()

        def insertarDatosEnTabla(self, datos):
                for fila in datos:
                        posicionFila = self.tablaHabitaciones.rowCount()
                        self.tablaHabitaciones.insertRow(posicionFila)

                        for columna, value in enumerate(fila):
                                item = QtWidgets.QTableWidgetItem(value)
                                item.setTextAlignment(QtCore.Qt.AlignCenter)
                                self.tablaHabitaciones.setItem(posicionFila, columna, item)

        # Abre el archivo CSV y devuelve los datos como una lista de filas
        def leerDatosDesdeCSV(self):
                with open('ArchivosCSV/Habitacion.csv', newline='') as csvfile:
                        reader = csv.reader(csvfile, delimiter=',', quotechar='"')
                        return list(reader)
                
        # Carga los datos del archivo CSV en el tableWidget
        def cargarHabitacionesCSV(self):
                datos = self.leerDatosDesdeCSV()
                fechaHoy = datetime.datetime.now().date()
                with open('ArchivosCSV/Habitaciones.csv', "r", encoding="latin1") as w:
                                lector = csv.reader(w, delimiter=",")
                                habOcupadas = []
                                for lista in lector:
                                        if lista[5] == "None" and datetime.datetime.strptime(lista[4], "%d/%m/%Y").date() <= fechaHoy:
                                                habOcupadas.append(lista)

                if datos:
                        flag = True
                        self.maximo = 0
                        # Seleccionar las columnas "Id", "Capacidad", "Separada", "Tipo de Mascota" y "Precio Base" (columnas 0, 1, 2, 3 y 4)
                        #datos_seleccionados = [[fila[0], fila[1], "Si" if fila[2] == "True" else "No" if fila[2] == "False" else "Separada", fila[3], fila[4]] for fila in datos if (fila[0] not in habOcupadas)]
                        datos_seleccionados = []
                        for fila in datos:
                                for lis in habOcupadas:
                                        if flag == True:
                                                if fila[0] != lis[1]:
                                                        flag = True
                                                else:
                                                        flag = False
                                if flag == True:
                                        dato = [fila[0], fila[1], "Si" if fila[2] == "True" else "No" if fila[2] == "False" else "Separada", fila[3], fila[4]]
                                        datos_seleccionados.append(dato)
                                        if fila[1] != "Capacidad":
                                                if int(fila[1]) > self.maximo:
                                                        self.maximo = int(fila[1])
                                                        self.spinBoxCantidad.setMaximum(self.maximo)
                                else:
                                        flag = True
                        encabezados = datos_seleccionados.pop(0)
                        self.tablaHabitaciones.setColumnCount(len(encabezados))
                        self.tablaHabitaciones.setHorizontalHeaderLabels(encabezados)

                        self.insertarDatosEnTabla(datos_seleccionados)
                else:
                        print("La lista de datos está vacía")

        def verificarCamposFiltros(self):
                # Obtener los valores de los campos de entrada de datos
                desde = self.dateEditDesde.text()
                sizeMascota = self.comboBoxSizeMascota.currentText()
                mascotaPeligrosa = self.comboBoxMascotaPeligrosa.currentText()
                tipoMascota = self.comboBoxTipoMascota.currentText()

                if self.comboBoxSizeMascota.currentIndex() > 0:
                        if self.comboBoxSizeMascota.currentIndex() == 1:
                                self.spinBoxCantidad.setMaximum(self.maximo)
                        elif self.comboBoxSizeMascota.currentIndex() == 2:
                                max = (self.maximo / 2)
                        elif self.comboBoxSizeMascota.currentIndex() == 3:
                                max = (self.maximo / 3)
                        elif self.comboBoxSizeMascota.currentIndex() == 4:
                                max = (self.maximo / 4)
                        elif self.comboBoxSizeMascota.currentIndex() == 5:
                                max = (self.maximo / 5)
                        if self.comboBoxSizeMascota.currentIndex() >= 2 and self.comboBoxSizeMascota.currentIndex() <= 5:
                                maximo = round(max)
                                self.spinBoxCantidad.setMaximum(maximo)
                # Verificar si todos los campos tienen datos
                if desde and sizeMascota != "Elegir" and mascotaPeligrosa != "Elegir" and tipoMascota != "Elegir":
                        self.BtnAplicarFiltros.setEnabled(True)
                else:
                        self.BtnAplicarFiltros.setEnabled(False)
        
        def aplicarFiltro(self):
                capacidad = {
                        "Muy pequeño": 1,
                        "Pequeño": 2,
                        "Mediano": 3,
                        "Grande": 4,
                        "Muy Grande": 5
                }

                separada = {
                        "Si": True,
                        "No": False
                }

                tipo_mascota = {
                        "Perro": "Perro",
                        "Gato": "Gato",
                        "Roedor": "Roedor",
                        "Otros": "Otros"
                }
                
                filtro_tamanho = capacidad.get(self.comboBoxSizeMascota.currentText())
                filtro_capacidad = filtro_tamanho * self.spinBoxCantidad.value()
                filtro_separada = separada.get(self.comboBoxMascotaPeligrosa.currentText())
                filtro_tipo_mascota = tipo_mascota.get(self.comboBoxTipoMascota.currentText())
                fecha = self.dateEditDesde.date()
                dia = fecha.day()
                mes = fecha.month()
                anho = fecha.year()
                filtro_fecha = datetime.date(anho, mes, dia)

                self.tablaHabitaciones.setRowCount(0)

                with open('ArchivosCSV/Habitaciones.csv', 'r') as file:
                        read = csv.reader(file)
                        next(read)  # Skip header row
                        datos = []
                        for l in read:
                                datos.append(l)
                        
                with open('ArchivosCSV/Habitacion.csv', 'r') as file:
                        reader = csv.reader(file)
                        next(reader)  # Skip header row
                        for row in reader:
                                flag = True
                                for dato in datos:
                                       if row[0] == dato[1] and dato[5] == 'None' and filtro_fecha <= datetime.datetime.strptime(dato[4], "%d/%m/%Y").date():
                                               flag = False
                                               break
                                if flag and \
                                        (filtro_capacidad is None or int(row[1]) >= filtro_capacidad) and \
                                        (filtro_separada is None or row[2] == str(filtro_separada)) and \
                                        (filtro_tipo_mascota is None or row[3] == filtro_tipo_mascota):
                                                self.tablaHabitaciones.insertRow(self.tablaHabitaciones.rowCount())
                                                for column, value in enumerate(row):
                                                        self.tablaHabitaciones.setItem(self.tablaHabitaciones.rowCount() - 1, column, QtWidgets.QTableWidgetItem(str(value)))

        def verificarSeleccion(self):
                if self.tablaHabitaciones.selectedItems():
                        self.BtnAceptar.setEnabled(True)
                else:
                        self.BtnAceptar.setEnabled(False)                                              

        def obtenerHabitacionSeleccionada(self):
                fila_seleccionada = self.tablaHabitaciones.currentRow()
                if fila_seleccionada != -1:
                        id_Habitacion = self.tablaHabitaciones.item(fila_seleccionada, 0).text()
                        self.usuario_seleccionado = id_Habitacion
                        with open('ArchivosCSV/Habitacion.csv', 'r') as file:
                                reader = csv.reader(file)
                                next(reader) 
                                for row in reader:   
                                        if row[0] == id_Habitacion:
                                                habitacion = row
                        return habitacion                      
        


        
        